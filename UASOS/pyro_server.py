# pyro_server.py>
# Library used for opening Pyro4 server that will hold the script
# generated by scriptgen.py
# It starts from SRCTask as separated instance, SRCTask and NAVTask
# will hold in listening until the connection is established
# Author: Vincenzo Maria VITALE - DCAS - MS TAS AERO - FTE
###################################################################

import Pyro4 as pyro
import serpent
import base64
import psutil
from copy import *
from packet import Packet
from scriptgen import script


@pyro.expose
class PyroServer:
    def __init__(self):
        # initialize just the values but not start the server on init for now
        self.server_up = False
        self.scr_dir = script
        while not self.server_up:
            if len(self.scr_dir.TIME) != 0:
                self.daemon = pyro.Daemon()
                self.uri = self.daemon.register(self)
                self.name_src = pyro.locateNS()
                self.name_src.register("pyro_svr", self.uri)

                self.server_up = True
                self.daemon.requestLoop()

    @pyro.expose
    def close(self):
        # self.daemon.shutdown()
        for proc in psutil.process_iter():
            if proc.name() == 'pyro4-ns.exe':
                proc.terminate()
                print('Pyro4 server terminated')
                return

    # Remember: I'm seeing these function from the Task point of view
    @pyro.expose
    def read_data(self, it: int):
        # read line from server
        out_pack = Packet()
        out_pack.iter = it
        out_pack.Tot_iters = len(script.TIME)
        out_pack.Time = script.TIME[it]
        out_pack.Switch = script.SWITCH[it]
        out_pack.Task = script.TASK[it]
        if it != 0:
            out_pack.pImgs = deepcopy(script.IMGS[it-1])
        out_pack.Imgs = deepcopy(script.IMGS[it])
        out_pack.Fils = deepcopy(script.FILS[it])
        out_pack.Rots = deepcopy(script.ROTS[it])
        out_pack.Corr = deepcopy(script.CORS[it])
        # To add: NAV data

        return serpent.dumps(out_pack)

    @pyro.expose
    def send_data(self, inbound_pack):
        # send behavioral pack, remember to add the base64 decoding
        wrk_pack = Packet()
        # Implement thread to write on csv
        pass  # For now, it's fake


pyro_svr = PyroServer()
